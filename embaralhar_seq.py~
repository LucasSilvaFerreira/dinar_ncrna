import re
import random
def embaralhar (sequencia,size_nucleotideo):
            """
            Retorna um vetor 'V' e uma string  'S' com o a sequencia embaralhada, por uma quantidade 'X' de nucleotideos
            definidas pelo usuario 
            """
            sequencia=sequencia
            size_nucleotideo = size_nucleotideo
            #vetor =re.split('.{'+str(size_nucleotideo)+'}',sequencia )
            vetor = re.findall('.{'+str(size_nucleotideo)+'}',sequencia )
            
            
            random.shuffle(vetor)
            #print vetor
            contador=1
            encontrado=False
            print ('entrando')
            for start in vetor:               
                if re.match('ATG',start) and encontrado==False:
                    print ('primeiro')
                    print contador 
                    position_start=contador
                    #print contador,start
                    end_contador=1
                    for end in vetor[position_start:len(vetor)]:
                          if re.match('(TAA|TAG|TGA)',end):
                                print position_start,end_contador,end
                                encontrado=True
                                break
                                
                          end_contador+=1
                               
                                
                contador+=1 
            string_conct = ''.join(vetor)
            #print string_conct
            return string_conct
            #return vetor
saida=open ('dinar_ncrna_1000_embaralhado.txt','w')      

for teste in range(1,200):
      s =embaralhar('ACCTCCGGAGCACTCCGCCCAGCAGCGACGCGTTGAGACACTCGGGTGGTGAGAGCCGCCGCTGCACTTCCGCCACCGTGACCTTGTACTTCGAGGTGGAGCTGAGGAGCGAGAGGCGACCCGGAACTGAACAGAAGACTTCGTTGGGGTTCACCACGCCGCCGAAGAGGTTGTCCTTGTTAATAGGGATGGCGGAGACGGCATTGCTGTTGGACTTGGACAGGGACACGGGGCCTGCGGAGACAGAGGGGAGGCCGCGTGTTGGGCGTCGTGGATCACCCCCAAATCCTGCCCGACCCCGGCCCTCATCCCGGCCAGGGCCGGATCCCAGGCTTTGGGCCACAGTCCCCGCTTTTCCGTCCGGCTCTGAAATTCTGTGGCTCTGCTACTTCCCTTCCTCGGGCTCGAGCCCTTCCCTACCTCACCCGGCGGCCGGGAGGCGGCCCTGCCCTCCCCCAGCCAGCCTGGCCTGCGTTTCTGCCTTGACCCTTTCCCCTTCGCCGTCAAGGGTGCTCTCTAGAGATGGGTGGTGAAATTGGTGACCCCTGAGGCGCTGAGCATCCGAGCGGAGTGGGCCCCAGATGAGGTCCAGGACCACGGGTTCAGGGTGCAGGGGAGGGAATTACATTTGCAAACCGAGAGCAAGTTACTTGTACTTCAGGGGTTTTGCTGGGTGGGGTTTTAGTGTCGGGGAAAAACTGCTTCAAAGACCCATTATTAAAATCAGCCGACAATTTAGATGGCTAAAGCACCCTGTAAACGAGCGTTTTAATTGAGGCACCACGCTGGGAAGTGGTGGATTTTGTTGTCCACACCACACGTCCCGTCTTTTTGATAAATAGGCCCTTTCCTATGTTCAATTTTGAAAACGTCTCAGTTTTGGAGATCCATTCCAAGGCCAGTTTTGAACTGCGGAGTGGGGAGGGAAGAACAGGCCTACAGTGGAATACTAGCAATGTGCCCTTTTGTTAAGTAAATACTTAACAGTCCTCTGCTAAAGCGCCTTTATTGGGAAAGTGGGTATATATACTTCCTAGTTAAAACCATAAGCTCTTTATTGCTGGACTCACCACTGTTAGAAAAAAAAAAAATAGAAGACCTGCAGAAAGTATACTAATGCATTACGTTTCTCAGCACCAGTGTAATTCAGATGCATTCACAACCATTTAAGTACAGTATGCATTGTATTTTAAAATTCCATTTGGAGACATCATATGCACACAATCTCATCACAGTGTTCCTTATGCGTTCTTTAATGGGGATATGCTAGAGGTATAGGGAGGTGGGGGGCTCTAGGTTTTGGATAGATCACTTGTGACATTAATAGCTCTGGGGAGGCTAATAGAGACAATAGGAGTTAAACGAACTCTTGAGAGATTACTAATAAAAGAGCCAATTATCATGTCGACTTGGAAAGAGCATCTCTTAAGATTTATCCCTTGCACATCTAATTTGACGTGACAAAGACTTCACAGATGCAAAAATGAAACTTTAAACTAGCTAACAATATACTGATTGGGGTTAGAAATGAGAACAGTTTTATATAGCATCGTCCTCTGGTGGTGCCTAGAATCCTGAAATGTAACATTGCCACCATAACCAAAAAAAAAGCTGCTACCAAGAGTGAATAGCATTTAATTCAGTAAACTTTATTTCTACTCACTAAACACAATACAGATTACAAATCCATGCAAATCACTTGACACTTTTCTAACAATTTCTCCTCTGAACAAGTATGCTAATATTCCTCCCATCTTCAAGATACTAATTTTAACCAAAAGCTAAAATTTTGTTAACCTAATTCACAAAGTTCTAAGACCCTTAAACAGCTAACAAGAAACTAAATTGAAGAACATGAATGTTTTTTTCCTCTACTAAAGAGTGCTTCTTATCATCTGTTCTTACATTAATGTTAAATTATTTGTACTATTTTAGCATTATACACTTCTTAACCTTCATCCAGGCAATGGATTAAACTATCAAACTGTTTCAAAATTGAAATGCCACTTCCAAATCAGTTCAACTACTGTACATTTTGTGTGTTTGTCCAAATATCATTAAACTAAATTAAATGGTCAAATCATGAGTCAGAACAAAGCTAGCCTGTTGGCATTACCAACATACTGAAGGCTGATTATTTAAGCATTGCTGTTCTGTGCCTATCTATTTGCTAATTCTGAGCCTTTAGGAAATCCTATTTGGAAAAAATAAACACATCTCTGCAAGTTCTTTTAAATAGCACTCTGCCTGTAAGGACATGCTTGGAATGCAGAAGGAAATGGCTTACCTTTCTTAATTACAGTTTGATCTGGGATGTTAATACCCGGGTCTTCTACATGCTGCAACAAAAGGATACACATGGATGTAAGTGTATCATCAAAACAAAAGGAAATGAATATTCCCTGCAAGATGGGAGGAGGGGAAGGTGTAGAATCAAAATTCCCCCTCCCGTATAATGACATTTATATATAAACATCTCATCTTGGCTTATTGGAATTTGGGGCTTTGCAACTCAAGAGGTTTCACTGCACACCCATGGCCAATTTCTCCTCCTCCAGCAAATAATCCATGTTTAAAAGGGGTGGAGATGGGGAATAAAACTTTCTTTGGAAATTAAATCAAGTGTTGGAGCACCTAATCATTCTCAGTCAGTTCAACATTTAGAAATGTACCTAGCTTTAGATTGGCGCCTCAGCGGCTTCTGACTTTAGCAATTCCAGTGTTCAGGCAGCGAAAGCCAGGGAAACACAATAGAAATGACAGGGGCGGGAGTAACAGGAGAGTGTTGGAAAAGAAAAGGTTTAGGTAGTATAATAAAGAGCAAACACACACACCTTTATGGAAAACTCCACATAAATTTTTAGAAAGACTACTGCCTAAGCCTGGGTATGATAGGAATATGAAAATGACCAAAACCAAAAAACCTTTGAGCTTGCTTTCCTGTTGTCCAACAGCAGGTTTGTTGTTAGTGTGGGGTGTTTTTCTTTTTCTTTTCTTTTTTTTTTTTTTTTTTACAGATGGATGGGTATACGTGTGCGCACTAGAGTCAAAACGTGATTAGAAAGTAAAATGAAGTCATGTTTTCTAATGCAGAAACTGACAGGCAATATAATGTCTGGCTGTGTTTACAAATTAGCACCAGGGCTGCTGAGATAGAAGATTTTGCAATCATTACCAAACACAGGCATTACCATTTAAAAAACTATTGCTTCCTTCTCTAGTCTTTGTCCAACAATAATACTGATTCGAACATTTTCCATTCTGTCTTGGATTTATGCTCCTGTTAATTGTGCCTGATCGCAATGATTCCGGGTGGATGGTACTAAGTTGCTTTATTACAGGTTTTATTATACTCAATGCTCTCATTTGTAACTTGCCTAAAGTGCTTCTGGATTTAAGTATAATTAAATTGAGAAATGTTCA',3)
      
      saida.write(s+'\n')
